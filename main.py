import logging
import requests
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram import BaseMiddleware
from aiogram.types import Update, Message, CallbackQuery
from datetime import datetime
import os
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

logging.basicConfig(level=logging.INFO)

TOKEN_TG = os.getenv("TOKEN_TG")
OPENWEATHERMAP_API_KEY = os.getenv("OPENWEATHERMAP_API_KEY")

class UserProfile(StatesGroup):
    weight = State()
    height = State()
    age = State()
    activity = State()
    city = State()


WORKOUT_CALORIES = {
    "–±–µ–≥": 10,
    "—Ö–æ–¥—å–±–∞": 6,
    "–ø–ª–∞–≤–∞–Ω–∏–µ": 7,
    "–π–æ–≥–∞": 4,
    "—Ç–µ–Ω–Ω–∏—Å": 8,
    "–±–∞–¥–º–∏–Ω—Ç–æ–Ω": 8,
    "—Ç–∞–Ω—Ü—ã": 7,
}

bot = Bot(token=TOKEN_TG)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
users = {}


def get_weather(city: str) -> float:
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_TOKEN}&units=metric"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return data["main"]["temp"]
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: {response.json().get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")


def calculate_norms(weight: int, height: int, age: int, activity_minutes: int, temperature: float):
    water_goal = weight * 30 + (activity_minutes // 30) * 500
    if temperature > 25:
        water_goal += 500
    calorie_goal = 10 * weight + 6.25 * height - 5 * age + 200
    return water_goal, calorie_goal


def get_food_info(product_name):
    url = f"https://world.openfoodfacts.org/cgi/search.pl?action=process&search_terms={product_name}&json=true"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        products = data.get('products', [])
        if products:
            first_product = products[0]
            return {
                'name': first_product.get('product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'calories': first_product.get('nutriments', {}).get('energy-kcal_100g', 0)
            }
        return None
    print(f"–û—à–∏–±–∫–∞: {response.status_code}")
    return None


@dp.message(Command("set_profile"))
async def set_profile(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(UserProfile.weight)


@dp.message(UserProfile.weight)
async def set_weight(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞.")
        return
    await state.update_data(weight=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    await state.set_state(UserProfile.height)


@dp.message(UserProfile.height)
async def set_height(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–æ—Å—Ç–∞.")
        return
    await state.update_data(height=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(UserProfile.age)


@dp.message(UserProfile.age)
async def set_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞.")
        return
    await state.update_data(age=int(message.text))
    await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    await state.set_state(UserProfile.activity)


@dp.message(UserProfile.activity)
async def set_activity(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        return
    await state.update_data(activity=int(message.text))
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    await state.set_state(UserProfile.city)


@dp.message(UserProfile.city)
async def set_city(message: Message, state: FSMContext):
    city = message.text
    await state.update_data(city=city)
    data = await state.get_data()
    weight = data["weight"]
    height = data["height"]
    age = data["age"]
    activity = data["activity"]

    try:
        temperature = get_weather(city)
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ: {e}")
        return

    water_goal, calorie_goal = calculate_norms(weight, height, age, activity, temperature)

    users[message.from_user.id] = {
        "weight": weight,
        "height": height,
        "age": age,
        "activity": activity,
        "city": city,
        "temperature": temperature,
        "water_goal": water_goal,
        "calorie_goal": calorie_goal,
    }

    await message.answer(
        f"–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n"
        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {city}: {temperature}¬∞C\n"
        f"–í–∞—à–∞ –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {water_goal:.1f} –º–ª\n"
        f"–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calorie_goal:.1f} –∫–∫–∞–ª"
    )
    await state.clear()


@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! üü¢")


@dp.message(Command("check_progress"))
async def check_progress(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
        return

    water_goal = users[user_id]["water_goal"]
    logged_water = users[user_id].get("logged_water", 0)
    remaining_water = max(0, water_goal - logged_water)

    calorie_goal = users[user_id]["calorie_goal"]
    logged_calories = users[user_id].get("logged_calories", 0)
    burned_calories = users[user_id].get("burned_calories", 0)
    calorie_balance = calorie_goal - (logged_calories - burned_calories)

    await message.answer(
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
        f"üíß –í–æ–¥–∞:\n"
        f"- –í—ã–ø–∏—Ç–æ: {logged_water} –º–ª –∏–∑ {water_goal} –º–ª.\n"
        f"- –û—Å—Ç–∞–ª–æ—Å—å: {remaining_water} –º–ª.\n\n"
        f"üî• –ö–∞–ª–æ—Ä–∏–∏:\n"
        f"- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {logged_calories:.1f} –∫–∫–∞–ª –∏–∑ {calorie_goal} –∫–∫–∞–ª.\n"
        f"- –°–æ–∂–∂–µ–Ω–æ: {burned_calories} –∫–∫–∞–ª.\n"
        f"- –ë–∞–ª–∞–Ω—Å: {calorie_balance:.1f} –∫–∫–∞–ª."
    )


@dp.message(Command("log_water"))
async def log_water(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
        return

    args = message.text.split()
    if len(args) < 2 or not args[1].isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã –≤ –º–ª. –ù–∞–ø—Ä–∏–º–µ—Ä: /log_water 200")
        return

    water_amount = int(args[1])
    users[user_id]["logged_water"] = users[user_id].get("logged_water", 0) + water_amount
    remaining = max(0, users[user_id]["water_goal"] - users[user_id]["logged_water"])

    await message.answer(f"–í—ã –≤—ã–ø–∏–ª–∏ {users[user_id]['logged_water']} –º–ª –≤–æ–¥—ã. –û—Å—Ç–∞–ª–æ—Å—å: {remaining} –º–ª.")


@dp.message(Command("log_food"))
@dp.message(Command("log_food"))
async def log_food(message: Message):
    user_id = message.from_user.id

    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /log_food –±–∞–Ω–∞–Ω")
        return

    product_name = args[1]
    food_info = get_food_info(product_name)
    if not food_info:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ '{product_name}'.")
        return

    product_name = food_info['name']
    calories_per_100g = food_info['calories']

    await message.answer(f"{product_name} ‚Äî {calories_per_100g} –∫–∫–∞–ª –Ω–∞ 100 –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?")

    @dp.message(lambda msg: msg.text.isdigit())
    async def log_grams(msg: Message):
        grams = int(msg.text)
        calories = (calories_per_100g / 100) * grams
        users[user_id]["logged_calories"] = users[user_id].get("logged_calories", 0) + calories
        balance = users[user_id]["calorie_goal"] - users[user_id]["logged_calories"]
        await msg.answer(
            f"–í—ã —Å—ä–µ–ª–∏ {calories:.1f} –∫–∫–∞–ª. –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫.\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏: {balance:.1f} –∫–∫–∞–ª."
        )



@dp.message(Command("log_workout"))
async def log_workout(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
        return

    args = message.text.split(maxsplit=2)
    if len(args) < 3 or not args[2].isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –µ—ë –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: /log_workout –±–µ–≥ 30")
        return

    workout_type = args[1].lower()
    duration = int(args[2])

    if workout_type not in WORKOUT_CALORIES:
        await message.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {workout_type}. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {', '.join(WORKOUT_CALORIES.keys())}")
        return

    calories_burned = WORKOUT_CALORIES[workout_type] * duration
    additional_water = round(duration * 6)

    users[user_id]["burned_calories"] = users[user_id].get("burned_calories", 0) + calories_burned
    users[user_id]["logged_water"] = users[user_id].get("logged_water", 0) + additional_water

    await message.answer(
        f"üèãÔ∏è‚Äç‚ôÇÔ∏è {workout_type.capitalize()} {duration} –º–∏–Ω—É—Ç ‚Äî {calories_burned} –∫–∫–∞–ª —Å–æ–∂–∂–µ–Ω–æ.\n"
        f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {additional_water} –º–ª –≤–æ–¥—ã!"
    )


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
